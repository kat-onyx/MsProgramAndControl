{"version":3,"sources":["webpack:///src/tunnelPiece.js","webpack:///webpack/bootstrap","webpack:///src/gameView.js","webpack:///src/ghost.js","webpack:///src/index.js","webpack:///src/maze.js","webpack:///src/movingCritter.js","webpack:///src/msPac.js","webpack:///src/pellet.js","webpack:///src/tile.js"],"names":[],"mappings":"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","file":"main.5934138b.js","sourceRoot":"..","sourcesContent":["class TunnelPiece {\n    constructor(xPos, yPos, width, height, position) {\n        // debugger\n        this.width = width;\n        this.height = height;\n        this.xPos = xPos;\n        this.yPos = yPos;\n        this.position = position;\n    }\n\n    draw(ctx) {\n        //#ff7f63\n        this.fillStyle = \"black\"\n        ctx.fillRect(this.xPos, this.yPos, this.width, this.height);\n    }\n}\n\nmodule.exports = TunnelPiece;"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","const MsPac = require(\"./msPac\");\nconst Inky = require(\"./ghost\").inky;\nconst Pinky = require(\"./ghost\").pinky;\nconst Clyde = require(\"./ghost\").clyde;\nconst Blinky = require(\"./ghost\").blinky;\nconst Maze = require(\"./maze\");\n\n// const startAudio = new Audio(\"../dist/assets/sounds/01_Game_Start.mp3\");\n\nclass GameView {\n  constructor(ctx) {\n    this.ctx = ctx;\n    this.keyPressed = [];\n    this.startTime = Math.floor(Date.now() / 1000);\n    this.maze = new Maze(this.ctx);\n    this.msPac = new MsPac(this.ctx, this.maze);\n    this.inky = new Inky(this.ctx, this.maze);\n    this.pinky = new Pinky(this.ctx, this.maze, this.frameCount);\n    this.blinky = new Blinky(this.ctx, this.maze, this.frameCount);\n    this.clyde = new Clyde(this.ctx, this.maze, this.frameCount);\n    this.ghostHouse = [this.inky, this.blinky, this.pinky, this.clyde];\n\n    this.keyBinds = this.keyBinds.bind(this);\n    // this.startAudio = startAudio;\n\n  }\n\n  keyBinds() {\n    // debugger\n    //keyCodes obtained here: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#Value_of_keyCode\n    document.addEventListener(\"keydown\", e => {\n      if ((e.code === \"KeyD\" || e.code === \"ArrowRight\") && this.msPac.moveInput.length <= 1) {\n        this.keyPressed.unshift(e.code);\n        if (this.msPac.moveInput[0] !== \"right\") {\n          this.msPac.moveRight();\n        }\n        \n      }\n      if ((e.code === \"KeyA\" || e.code === \"ArrowLeft\") && this.msPac.moveInput.length <= 1) {\n        this.keyPressed.unshift(e.code);\n        if (this.msPac.moveInput[0] !== \"left\") {\n          this.msPac.moveLeft();\n        }\n      }\n      if ((e.code === \"KeyW\" || e.code === \"ArrowUp\") && this.msPac.moveInput.length <= 1) {\n        this.keyPressed.unshift(e.code);\n        if (this.msPac.moveInput[0] !== \"up\") {\n          this.msPac.moveUp();\n        }\n      }\n      if ((e.code === \"KeyS\" || e.code === \"ArrowDown\") && this.msPac.moveInput.length <= 1) {\n        this.keyPressed.unshift(e.code);\n        if (this.msPac.moveInput[0] !== \"down\") {\n          this.msPac.moveDown();\n        }\n      }\n    });\n  }\n\n  play() {\n    // this.keyBinds();\n    requestAnimationFrame(this.animate.bind(this));\n    // this.startAudio.volume = 1;\n    // this.startAudio.play();\n  }\n\n  animate() {\n    this.ctx.clearRect(0, 0, 870, 750);\n    this.step();\n    this.detectPelletConsumtption();\n    this.detectCritterCollision();\n    this.updatePos();\n    this.drawUnits();\n    \n    this.updateGhostBehavior();\n    this.updateFrameCount();\n    this.drawText();\n\n    if (this.msPac.lives === 0 || this.maze.pellets.length === 0) {\n      this.gameOver();\n      return;\n    }\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  updatePos() {\n    this.detectTunnelTravel();\n    // this.msPac.newPos(this.maze);\n  }\n\n  updateFrameCount() {\n    this.frameCount += 1;\n  }\n\n  step() {\n    // this.msPac.checkDir();\n    if (this.msPac.moveInput.length > 0) {\n      this.continueMovingCheck();\n    }\n\n    this.ghostHouse.forEach(ghost => {\n      ghost.checkDir();\n    });\n  }\n\n  drawUnits() {\n    this.maze.draw(this.ctx);\n    this.msPac.draw(this.ctx);\n    this.inky.draw(this.ctx);\n    this.pinky.draw(this.ctx);\n    this.blinky.draw(this.ctx);\n    this.clyde.draw(this.ctx);\n  }\n\n  drawText() {\n    this.showLives();\n    this.showScore();\n  }\n\n  detectPelletConsumtption() {\n    this.maze.pellets.forEach((pellet, i) => {\n      if (this.isPointInTile(this.msPac, pellet)) {\n        this.msPac.score += pellet.point;\n        this.maze.pellets.splice(i, 1);\n        return;\n      }\n    });\n  }\n\n  detectCritterCollision() {\n    this.ghostHouse.forEach(ghost => {\n      if (this.isPointInTile(this.msPac, ghost)) {\n       \n        this.msPac.lives -= 1;\n        this.resetPos();\n      }\n    });\n  }\n\n  updateGhostBehavior() {\n    let currentTime = Math.floor(Date.now() / 1000);\n    this.ghostHouse.forEach(ghost => {\n      if (currentTime - this.startTime >= 30) {\n        ghost.chaseMsPac(this.msPac);\n      } else if (currentTime - this.startTime >= 20) {\n        ghost.randomMovePath();\n      }\n    });\n  }\n\n  resetPos() {\n    this.msPac.posX = 308;\n    this.msPac.posY = 572;\n    this.msPac.destinationPosX = 308,\n    this.msPac.destinationPosY = 572;\n    this.msPac.currentPixelPosX = 308,\n    this.msPac.currentPixelPosY = 572;\n    this.msPac.position = [7, 13];\n    this.moveInput = [];\n  }\n\n  isPointInTile(critter, pellet) {\n    let pelletXMin = pellet.posX;\n    let pelletXMax = pellet.posX + pellet.width;\n    let pelletYMin = pellet.posY;\n    let pelletYMax = pellet.posY + pellet.height;\n\n    let critterXMin = critter.posX;\n    let critterXMax = critter.posX + critter.width;\n    let critterYMin = critter.posY;\n    let critterYMax = critter.posY + critter.width;\n    return (\n      ((critterXMin >= pelletXMin && critterXMin < pelletXMax) ||\n        (critterXMax > pelletXMin && critterXMax <= pelletXMax)) &&\n      ((critterYMin >= pelletYMin && critterYMin < pelletYMax) ||\n        (critterYMax > pelletYMin && critterYMax <= pelletYMax))\n    );\n  }\n\n  detectTunnelTravel() {\n    if ((this.msPac.position[0] === 0 && \n      this.msPac.position[1] === 8) &&\n      this.msPac.moveInput[0] === \"left\") {\n        this.msPac.position[0] = 15;\n        this.msPac.posX = (16 * 44)\n        this.msPac.posY = (8 * 44)\n        this.msPac.destinationPosX = (15 * 44)\n        this.msPac.destinationPosY = (8 * 44)\n        this.msPac.currentPixelPosX = (15 * 44)\n        this.msPac.currentPixelPosY = (8 * 44)\n      } else if ((this.msPac.position[0] === 15 && \n        this.msPac.position[1] === 8) && \n        this.msPac.moveInput[0] === \"right\") {\n        this.msPac.position[0] = 0;\n        this.msPac.posX = 0;\n        this.msPac.posY = (8 * 44)\n        this.msPac.destinationPosY = (8 * 44)\n        this.msPac.destinationPosX = 0;\n        this.msPac.currentPixelPosY = (8 * 44)\n        this.msPac.currentPixelPosX = (0)\n      }\n  }\n\n  checkMove(critterPosition, move) {\n    // debugger\n    let currentXPos = this.msPac.position[0];\n    let currentYPos = this.msPac.position[1];\n\n    let nextXPos =\n      critterPosition[0] + this.msPac.directions[move][0];\n    let nextYPos =\n      critterPosition[1] + this.msPac.directions[move][1];\n\n    for(let i = 0; i < this.maze.tunnelPieces.length; i++) {\n      if (\n        nextXPos === this.maze.tunnelPieces[i].position[0] &&\n        nextYPos === this.maze.tunnelPieces[i].position[1]\n      ) {\n        return [nextXPos, nextYPos];\n      }\n    }\n    return false;\n  }\n\n  continueMovingCheck() {\n    // debugger\n    let currentXPos = this.msPac.position[0];\n    let currentYPos = this.msPac.position[1];\n\n    if (this.msPac.doneAnimatingX && this.msPac.doneAnimatingY) {\n      if (this.msPac.moveInput[0] && (this.checkMove(this.msPac.position, this.msPac.moveInput[0]))) {\n          this.msPac.position = this.checkMove(this.msPac.position, this.msPac.moveInput[0])\n          this.msPac.newDestination(currentXPos, currentYPos);\n          if (this.msPac.moveInput.length === 2) {\n            this.msPac.moveInput.pop();\n          }\n      } else if (this.msPac.moveInput[1] && (this.checkMove(this.msPac.position, this.msPac.moveInput[1]))) {\n          this.msPac.position = this.checkMove(this.msPac.position, this.msPac.moveInput[1])\n          this.msPac.newDestination(currentXPos, currentYPos);\n      } else {\n        this.msPac.newDestination(currentXPos, currentYPos)\n        this.msPac.position = [currentXPos, currentYPos]\n        this.msPac.moveInput = []\n      }\n    }\n  }\n\n  showScore() {\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillStyle = \"red\";\n    this.ctx.font = \"30px Righteous\";\n    this.ctx.fillText(`Score: `, 730, 415);\n    this.ctx.fillText(parseInt(this.msPac.score), 745, 450);\n  }\n\n  showLives() {\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillStyle = \"red\";\n    this.ctx.font = \"30px Righteous\";\n    this.ctx.fillText(\"Lives: \", 730, 300);\n    for (let i = 0; i < this.msPac.lives; i++) {\n      this.ctx.drawImage(\n        this.msPac.msPacImg,\n        0,\n        0,\n        160,\n        160,\n        710 + i * 40,\n        300,\n        this.msPac.width * 1.5,\n        this.msPac.width * 1.5\n      );\n    }\n  }\n\n  gameOver() {\n    if (this.msPac.lives === 0) {\n      this.ctx.font = \"30px 'Righteous', cursive\";\n      this.ctx.fillStyle = \"red\";\n      this.ctx.fillText(\"GAME OVER\", 265, 475);\n      this.ctx.fillStyle = \"black\";\n    } else {\n      this.ctx.font = \"30px 'Righteous', cursive\";\n      this.ctx.fillStyle = \"red\";\n      this.ctx.fillText(\"YOU WIN! :)\", 265, 475);\n      this.ctx.fillStyle = \"black\";\n    }\n  }\n}\n\nmodule.exports = GameView;\n","const MovingCritter = require(\"./movingCritter\");\n\nconst ghostsImg = new Image();\nghostsImg.loaded = false;\nghostsImg.onload = function() {\n    this.loaded = true;\n    // console.log(this.loaded)\n}\nghostsImg.src = 'dist/assets/images/ghost.png';\n\nclass Ghost extends MovingCritter {\n    constructor(ctx, velX, velY, frameCount) {\n    super(ctx, velX, velY, frameCount);\n    this.ctx = ctx;\n    this.ghostsImg = ghostsImg;\n    this.width = 43;\n    this.height = 43;\n    this.scared = false;\n    this.destination = null;\n    this.possiblePaths = [];\n    this.ghostDirs = {\n        \"up\": [0, -2],\n        \"down\": [0, 2],\n        \"left\": [-2, 0],\n        \"right\": [2, 0]\n    }\n\n    this.newPos = function () {\n        this.posX += this.velX;\n        this.posY += this.velY;\n        }\n    }\n\n\n    draw(ctx) {\n       this.updateFrameCount()\n       this.routeToDestination(this.destination);\n       this.newPos();\n       this.drawGhost(ctx);\n    }\n\n    chaseMsPac(msPacPos) {\n       this.destination = [msPacPos.posX, msPacPos.posY]\n    }\n\n    drawGhost(ctx) {\n        return ctx.drawImage(this.ghostsImg, this.imgOffsetX, 0, 160, 160, this.posX - 5, this.posY - 10, this.width * 1.5, this.width * 1.5)\n    }\n\n    calculateDestPath(currentPath) {\n\n        let destination = currentPath;\n\n        for (let k in this.ghostDirs) {\n            let possibleDest = [\n                this.posX + this.ghostDirs[k][0],\n                this.posY + this.ghostDirs[k][1]\n            ]\n            if (possibleDest[0] < this.posX && destination[0] < this.posX) {\n                if (this.possiblePaths.indexOf(this.ghostDirs[\"left\"]) === -1) {\n                    this.possiblePaths.push(this.ghostDirs[\"left\"])\n                } \n            } else if (possibleDest[0] > this.posX && destination[0] > this.posX) {\n                if (this.possiblePaths.indexOf(this.ghostDirs[\"right\"]) === -1) {\n                    this.possiblePaths.push(this.ghostDirs[\"right\"])\n                }\n            } else if (possibleDest[1] > this.posY && destination[1] > this.posY) {\n                // console.log(possibleDest[1], this.destination[1])\n                if (this.possiblePaths.indexOf(this.ghostDirs[\"down\"]) === -1) {\n                    this.possiblePaths.push(this.ghostDirs[\"down\"])\n                }\n            } else if (possibleDest[1] < this.posY && destination[1] < this.posY) {\n                if (this.possiblePaths.indexOf(this.ghostDirs[\"up\"]) === -1) {\n                this.possiblePaths.push(this.ghostDirs[\"up\"])\n                }\n            }\n        }\n    }\n\n    routeToDestination(currentDestination) {\n        this.calculateDestPath(currentDestination);\n\n        if (this.collisionDetectedGhost === false) {\n            this.posX += this.possiblePaths[0][0];\n            this.posY += this.possiblePaths[0][1];\n        } else {\n            this.posX -= this.possiblePaths[0][0];\n            this.posY -= this.possiblePaths[0][1];\n            this.collisionDetectedGhost = false;\n            this.possiblePaths.splice(0, 1);\n        }\n    }\n\n    randomMovePath() {\n        let posX = Math.floor(Math.random() * 700);\n        let posY = Math.floor(Math.random() * 770);\n        this.destination = [posX, posY];\n    }\n\n    randomRoute() {\n\n        if (this.collisionDetectedGhost === false) {\n            this.posX += this.ghostDirs[this.randomPath][0];\n            this.posY += this.ghostDirs[this.randomPath][1];\n        } else {\n            this.posX -= this.ghostDirs[this.randomPath][0];\n            this.posY -= this.ghostDirs[this.randomPath][1];\n            this.collisionDetectedGhost = false;\n            this.randomPath = this.randomMoveDir();\n        }\n\n    }\n}\n\nclass Inky extends Ghost {\n    constructor(ctx, maze) {\n        super(maze);\n        this.imgOffsetX = 320;\n        this.ctx = ctx;\n        this.posX = 308;\n        this.posY = 380;\n        this.color = \"blue\";\n        this.destination = [125, 116];\n    }\n}\nclass Pinky extends Ghost {\n    constructor(ctx, maze) {\n        super(maze);\n        this.imgOffsetX = 0;\n        this.ctx = ctx;\n        this.posX = 345;\n        this.posY = 380;\n        this.color = \"pink\";\n        this.destination = [550, 125];\n    }\n}\n\nclass Blinky extends Ghost {\n    constructor(ctx, maze) {\n        super(maze);\n        this.imgOffsetX = 160;\n        this.ctx = ctx;\n        this.posX = 345;\n        this.posY = 350;\n        this.color = \"red\";\n        this.destination = [500, 300];\n    }\n}\n\nclass Clyde extends Ghost {\n    constructor(ctx, maze) {\n        super(maze);\n        this.imgOffsetX = 160 * 3;\n        this.ctx = ctx;\n        this.posX = 308;\n        this.posY = 350;\n        this.color = \"orange\";\n        this.destination = [125, 300];\n    }\n}\n\nmodule.exports = { \n    ghost: Ghost,\n    inky: Inky,\n    pinky: Pinky,\n    clyde: Clyde,\n    blinky: Blinky\n }","\nconst GameView = require(\"./gameView\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n\n  const canvasEl = document.getElementById(\"myCanvas\");\n  canvasEl.width = 870;\n  canvasEl.height = 790;\n  const ctx = canvasEl.getContext(\"2d\");\n  const game = new GameView(ctx);\n  game.keyBinds();\n  game.play();\n});\n","const Tile = require(\"./tile\");\nconst Pellet = require(\"./pellet\");\nconst TunnelPiece = require(\"./tunnelPiece\");\n\nclass Maze {\n  constructor(ctx) {\n    this.radius = 10;\n    this.ctx = ctx;\n    this.width = 700;\n    this.height = 770;\n    // bitmap for the grid\n    this.grid = [\n      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],\n      [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1],\n      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n      [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1],\n      [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],\n      [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n      [1, 1, 1, 1, 0, 1, 1, 4, 4, 1, 1, 0, 1, 1, 1, 1],\n      [2, 0, 0, 0, 0, 1, 6, 6, 7, 6, 1, 0, 0, 0, 0, 2],\n      [1, 1, 1, 1, 0, 1, 6, 6, 6, 6, 1, 0, 1, 1, 1, 1],\n      [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],\n      [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1],\n      [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1],\n      [1, 0, 1, 1, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 0, 1],\n      [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1],\n      [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],\n      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    ],\n    this.blocksize = Math.ceil(this.width / this.grid[0].length);\n    this.tiles = this.tiles();\n    this.tunnelPieces = this.tunnelPieces();\n    this.pellets = this.pellets();\n  }\n\n  tiles() {\n    let tiles = [];\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] === 1) {\n          let tile = new Tile(\n            j * this.blocksize,\n            i * this.blocksize,\n            this.blocksize,\n            this.blocksize\n          );\n          tiles.push(tile);\n        }\n      }\n    }\n    return tiles;\n  }\n  tunnelPieces() {\n    let tunnelPieces = [];\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j <= this.grid[i].length; j++) {\n        if (this.grid[i][j] === 0 || this.grid[i][j] === 2) {\n          let tunnelPiece = new TunnelPiece(\n            j * this.blocksize,\n            i * this.blocksize,\n            this.blocksize,\n            this.blocksize,\n            [j, i]\n          );\n          tunnelPieces.push(tunnelPiece);\n        }\n      }\n    }\n    return tunnelPieces;\n  }\n\n  pellets() {\n    let pellets = [];\n\n    for (let i = 0; i < this.grid.length; i += 1) {\n      for (let j = 0; j < this.grid[i].length; j += 1) {\n        if (this.grid[i][j] === 0) {\n          let pellet = new Pellet(\n            j * this.blocksize,\n            i * this.blocksize,\n            this.blocksize,\n            this.blocksize\n          );\n          pellets.push(pellet);\n        }\n      }\n    }\n    return pellets;\n  }\n  draw(ctx) {\n    this.drawBackground(ctx);\n    this.drawTunnelPieces(ctx);\n    this.drawPellets(ctx);\n\n    this.drawTiles(ctx);\n  }\n\n  drawBackground(ctx) {\n    ctx.beginPath();\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRect(0, 0, this.width, this.height);\n  }\n\n  drawTiles(ctx) {\n    this.tiles.forEach(tile => tile.draw(ctx));\n  }\n\n  drawTunnelPieces(ctx) {\n    this.tunnelPieces.forEach(tunnelPiece => tunnelPiece.draw(ctx));\n  }\n\n  drawPellets(ctx) {\n    this.pellets.forEach(pellet => pellet.draw(ctx));\n  }\n}\n\nmodule.exports = Maze;\n","class MovingCritter {\n  constructor(maze) {\n    this.frameCount = 0;\n    this.maze = maze;\n    this.velX = 0;\n    this.velY = 0;\n    this.posX = 0;\n    this.posY = 0;\n    this.collisionDetected = false;\n    this.collisionDetectedGhost = false;\n    this.moveInput = [];\n    this.destinationPosX = 7 * 44;\n    this.destinationPosY = 13 * 44;\n    this.doneAnimatingX = true;\n    this.doneAnimatingY = true;\n    this.detectWallCollision = this.detectWallCollision.bind(this);\n\n    this.directions = {\n      up: [0, -1],\n      down: [0, 1],\n      left: [-1, 0],\n      right: [1, 0]\n    };\n  }\n\n  checkDir() {\n    this.detectWallCollision();\n    if (this.collisionDetected === true) {\n      this.collisionDetectedGhost = true;\n    }\n    this.collisionDetected = false;\n  }\n  detectWallCollision() {\n    this.maze.tiles.forEach(tile => {\n      if (this.isPointInTile(tile)) {\n        this.collisionDetected = true;\n      }\n    });\n  }\n\n  isPointInTile(tile) {\n    let tileXMin = tile.xPos;\n    let tileXMax = tile.xPos + tile.width;\n    let tileYMin = tile.yPos;\n    let tileYMax = tile.yPos + tile.height;\n\n    let critterXMin = this.posX;\n    let critterXMax = this.posX + this.width;\n    let critterYMin = this.posY;\n    let critterYMax = this.posY + this.width;\n\n    return (\n      ((critterXMin >= tileXMin && critterXMin < tileXMax) ||\n        (critterXMax > tileXMin && critterXMax <= tileXMax)) &&\n      ((critterYMin >= tileYMin && critterYMin < tileYMax) ||\n        (critterYMax > tileYMin && critterYMax <= tileYMax))\n    );\n  }\n\n  updateFrameCount() {\n    this.frameCount += 1;\n    this.frameCount = this.frameCount % 60;\n  }\n\n  animateMoveX(destinationPos) {\n    if (this.currentPixelPosX > destinationPos) {\n      this.animFace = \"left\";\n      this.doneAnimatingX = false;\n      return (this.currentPixelPosX -= 4)\n    } else if (this.currentPixelPosX < destinationPos) {\n      this.animFace = \"right\";\n      this.doneAnimatingX = false;\n      return (this.currentPixelPosX += 4)\n    } else if (this.currentPixelPosX === destinationPos) {\n      this.doneAnimatingX = true;\n      return destinationPos;\n    }\n  }\n\n  animateMoveY(destinationPos) {\n    if (this.currentPixelPosY > destinationPos) {\n      this.animFace = \"up\";\n      this.doneAnimatingY = false;\n      return (this.currentPixelPosY -= 4)\n    } else if (this.currentPixelPosY < destinationPos) {\n      this.animFace = \"down\"\n      this.doneAnimatingY = false;\n      return (this.currentPixelPosY += 4)\n    } else if (this.currentPixelPosY === destinationPos) {\n      this.doneAnimatingY = true;\n      return destinationPos;\n    }\n  }\n\n  newDestination(prevXpos, prevYpos) {\n    if (prevXpos != this.position[0]) {\n      this.destinationPosX = this.position[0] * 44;\n    } else if (prevYpos != this.position[1]) {\n      this.destinationPosY = this.position[1] * 44;\n    }\n  }\n\n  moveLeft() {\n    this.moveInput.unshift(\"left\");\n  }\n\n  moveRight() {\n    this.moveInput.unshift(\"right\");\n  }\n\n  moveUp() {\n    this.moveInput.unshift(\"up\");\n  }\n\n  moveDown() {\n    this.moveInput.unshift(\"down\");\n  }\n}\n\nmodule.exports = MovingCritter;\n","const MovingCritter = require(\"./movingCritter\");\n\nconst msPacImg = new Image();\nmsPacImg.loaded = false;\nmsPacImg.onload = function () {\n  this.loaded = true;\n  // console.log(this.loaded)\n}\nmsPacImg.src = \"dist/assets/images/MsPac.png\";\n\nclass MsPac extends MovingCritter {\n  constructor(ctx, velX, velY, maze, frameCount) {\n    super(velX, velY, maze, frameCount);\n    this.ctx = ctx;\n    this.width = 44;\n    this.radius = 25;\n    this.position = [7, 13];\n    this.posX = this.position[0] * 44;\n    this.posY = this.position[1] * 44;\n    this.currentPixelPosX = this.posX;\n    this.currentPixelPosY = this.posY;\n    this.animFace = \"right\";\n    this.lives = 3;\n    this.score = 0;\n\n    this.msPacImg = msPacImg;\n  }\n\n  draw(ctx) {\n    if (this.posX === this.destinationPosX) {\n      this.doneAnimatingX = true;\n    }\n    if (this.posY === this.destinationPosY) {\n      this.doneAnimatingY = true;\n    }\n    ctx.fillStyle = \"red\";\n    if (this.posX != this.destinationPosX && this.doneAnimatingY === true) {\n      this.posX = this.animateMoveX(this.destinationPosX);\n      this.posX = Math.floor(this.posX);\n    } else if (this.posY != this.destinationPosY && this.doneAnimatingX === true) {\n      this.posY = this.animateMoveY(this.destinationPosY);\n      this.posY = Math.floor(this.posY)\n    }\n\n    this.updateFrameCount();\n    this.imgFrameSelect(ctx);\n  }\n\n\n  imgFrameSelect(ctx) {\n    if (this.animFace === \"right\") {\n      if (this.frameCount % 15 === 0) {\n        return ctx.drawImage(\n          this.msPacImg,\n          160,\n          0,\n          160,\n          160,\n          this.posX - 15,\n          this.posY,\n          this.width * 1.5,\n          this.width * 1.5\n        );\n      } else {\n        return ctx.drawImage(\n          this.msPacImg,\n          0,\n          0,\n          160,\n          160,\n          this.posX - 15,\n          this.posY,\n          this.width * 1.5,\n          this.width * 1.5\n        );\n      }\n    } else if (this.animFace === \"left\") {\n      if (this.frameCount % 15 === 0) {\n        return ctx.drawImage(\n          this.msPacImg,\n          320 + 160,\n          0,\n          160,\n          160,\n          this.posX - 10,\n          this.posY,\n          this.width * 1.5,\n          this.width * 1.5\n        );\n      } else {\n        return ctx.drawImage(\n          this.msPacImg,\n          320,\n          0,\n          160,\n          160,\n          this.posX - 10,\n          this.posY,\n          this.width * 1.5,\n          this.width * 1.5\n        );\n      }\n    } else if (this.animFace === \"down\") {\n      if (this.frameCount % 15 === 0) {\n        return ctx.drawImage(\n          this.msPacImg,\n          960 + 160,\n          0,\n          160,\n          160,\n          this.posX - 15,\n          this.posY - 15,\n          this.width * 1.5,\n          this.width * 1.5\n        );\n      } else {\n        return ctx.drawImage(\n          this.msPacImg,\n          960,\n          0,\n          160,\n          160,\n          this.posX - 15,\n          this.posY - 15,\n          this.width * 1.5,\n          this.width * 1.5\n        );\n      }\n    } else if (this.animFace === \"up\") {\n      if (this.frameCount % 15 === 0) {\n        return ctx.drawImage(\n          this.msPacImg,\n          640 + 160,\n          0,\n          160,\n          160,\n          this.posX - 5,\n          this.posY -5,\n          this.width * 1.5,\n          this.width * 1.5\n        );\n      } else {\n        return ctx.drawImage(\n          this.msPacImg,\n          640,\n          0,\n          160,\n          160,\n          this.posX - 5,\n          this.posY -5,\n          this.width * 1.5,\n          this.width * 1.5\n        );\n      }\n    } else {\n      return ctx.drawImage(\n        this.msPacImg,\n        0,\n        0,\n        160,\n        160,\n        this.posX - 21,\n        this.posY - 9,\n        this.width * 1.5,\n        this.width * 1.5\n      );\n    }\n  }\n}\n\nmodule.exports = MsPac;\n","\n\nclass Pellet {\n    constructor(posX, posY, width, height) {\n        this.width = width;\n        this.height = height;\n        this.posX = posX;\n        this.posY = posY;\n        this.point = 10;\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(this.posX, this.posY, this.width, this.height);\n\n        ctx.fillStyle = \"white\"\n        ctx.beginPath();\n        //44 === width/height of each pellet's square\n        ctx.arc((this.posX + (44/2)), (this.posY + (44/2)), this.width / 8, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.stroke()\n    }\n\n    findCenter() {\n        let centerFromX = this.posX + this.width;\n        let centerFromY = this.posY + this.height;\n    }\n}\n\n\nmodule.exports = Pellet;","class Tile {\n  constructor(xPos, yPos, width, height) {\n    // debugger\n    this.width = width;\n    this.height = height;\n    this.xPos = xPos;\n    this.yPos = yPos;\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = \"#ffb591\";\n    //#ff7f63\n    ctx.fillRect(this.xPos, this.yPos, this.width, this.height);\n  }\n}\n\nmodule.exports = Tile;\n"]}